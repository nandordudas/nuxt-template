{
  "Nuxt Page Template": {
    "prefix": "nuxt-page",
    "scope": "vue",
    "description": "Creates a new Nuxt page template with TypeScript support",
    "body": [
      "<script lang=\"ts\">",
      "/* [INFO] empty script */",
      "</script>",
      "",
      "<script setup lang=\"ts\">",
      "definePageMeta({",
      "  name: '${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}',",
      "  layout: ${1|false,'default'|},",
      "})",
      "</script>",
      "",
      "<template>",
      "  <div>",
      "    <h1>",
      "      {{ \\$route.name }}",
      "    </h1>",
      "  </div>",
      "</template>",
      "",
      "<style>",
      "/* [INFO] empty style */",
      "</style>",
      ""
    ]
  },

  "Vue Component with Generics": {
    "prefix": "vue-component-generic",
    "scope": "vue",
    "description": "Creates a new Vue component template with generic type support",
    "body": [
      "<script lang=\"ts\">",
      "type BaseData = Record<PropertyKey, unknown>",
      "",
      "export interface ${1:${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}}Props<T extends BaseData> {",
      "  ${2:data: T}",
      "}",
      "</script>",
      "",
      "<script setup lang=\"ts\" generic=\"T extends BaseData\">",
      "defineOptions({",
      "  inheritAttrs: false,",
      "})",
      "",
      "withDefaults(defineProps<${1:${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}}Props<T>>(), {",
      "  ${3:/* [INFO] empty default */}",
      "})",
      "</script>",
      "",
      "<template>",
      "  <div>",
      "    ${4:${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}}",
      "  </div>",
      "</template>",
      "",
      "<style scoped>",
      "/* [INFO] empty style */",
      "</style>",
      ""
    ]
  },

  "Vue Component Basic": {
    "prefix": "vue-component",
    "scope": "vue",
    "description": "Creates a new Vue component template without generic types",
    "body": [
      "<script lang=\"ts\">",
      "export interface ${1:${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}}Props {",
      "  ${2:/* [INFO] empty interface */}",
      "}",
      "</script>",
      "",
      "<script setup lang=\"ts\">",
      "defineOptions({",
      "  inheritAttrs: false,",
      "})",
      "",
      "withDefaults(defineProps<${1:${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}}Props>(), {",
      "  ${3:/* [INFO] empty default */}",
      "})",
      "</script>",
      "",
      "<template>",
      "  <div>",
      "    ${4:${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}}",
      "  </div>",
      "</template>",
      "",
      "<style scoped>",
      "/* [INFO] empty style */",
      "</style>",
      ""
    ]
  },

  "Pinia Setup Store Boilerplate": {
    "scope": "typescript",
    "prefix": "pinia-setup",
    "description": "Bootstrap the code needed for a Vue.js Pinia Setup Store file",
    "body": [
      "export interface ${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}State {",
      "  $0",
      "}",
      "",
      "export const use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store = defineStore('$TM_FILENAME_BASE', () => {",
      "  const state = reactive<${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}State>({",
      "    \/\/",
      "  })",
      "",
      "  return {",
      "    state,",
      "  }",
      "})",
      "",
      "if (import.meta.hot)",
      "  import.meta.hot.accept(acceptHMRUpdate(use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store, import.meta.hot))",
      ""
    ]
  }
}

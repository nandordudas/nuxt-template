{
  "Nuxt Page Template": {
    "prefix": "nuxt-page",
    "description": "Creates a new Nuxt page template with TypeScript support",
    "scope": "vue",
    "body": [
      "<script lang=\"ts\">",
      "/* [INFO] empty */",
      "</script>",
      "",
      "<script setup lang=\"ts\">",
      "definePageMeta({",
      "  name: '${TM_FILENAME_BASE}',",
      "  layout: ${1|false,'default'|},",
      "})",
      "</script>",
      "",
      "<template>",
      "  <UPage>",
      "    <UPageBody>",
      "      {{ \\$route.name }}$0",
      "    </UPageBody>",
      "  </UPage>",
      "</template>",
      ""
    ]
  },
  "Nuxt Layout Template": {
    "prefix": "nuxt-layout",
    "description": "Nuxt layout template with script sections and container",
    "scope": "vue",
    "body": [
      "<script lang=\"ts\">",
      "/* [INFO] empty */",
      "</script>",
      "",
      "<script setup lang=\"ts\">",
      "defineOptions({",
      "  name: '${TM_FILENAME_BASE}Layout',",
      "  inheritAttrs: false,",
      "})",
      "</script>",
      "",
      "<template>",
      "  <UContainer as=\"main\">",
      "    <slot />$0",
      "  </UContainer>",
      "</template>",
      ""
    ]
  },
  "Vue Component Basic": {
    "prefix": "vue-component",
    "description": "Creates a new Vue component template without generic types",
    "scope": "vue",
    "body": [
      "<script lang=\"ts\">",
      "export interface ${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Props {",
      "  ${TM_FILENAME_BASE/^(.*)$/${1:/downcase}/}: string",
      "}",
      "",
      "export interface ${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Emits {",
      "  click: [value: string]",
      "}",
      "</script>",
      "",
      "<script setup lang=\"ts\">",
      "defineOptions({",
      "  name: '${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}',",
      "  inheritAttrs: false,",
      "})",
      "",
      "const { ${TM_FILENAME_BASE/^(.*)$/${1:/downcase}/} = '${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}' } = defineProps<${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Props>()",
      "const emit = defineEmits<${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Emits>()",
      "",
      "function handleClick(value: string) {",
      "  emit('click', value)",
      "}",
      "</script>",
      "",
      "<template>",
      "  <div>",
      "    <UButton @click=\"handleClick('${TM_FILENAME_BASE}')\">",
      "      {{ ${TM_FILENAME_BASE/^(.*)$/${1:/downcase}/} }}$0",
      "    </UButton>",
      "  </div>",
      "</template>",
      ""
    ]
  },
  "Pinia Setup Store Boilerplate": {
    "prefix": "pinia-setup",
    "description": "Bootstrap the code needed for a Vue.js Pinia Setup Store file",
    "scope": "typescript",
    "body": [
      "export interface ${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}State {",
      "  ${TM_FILENAME_BASE/^(.*)$/${1:/downcase}/}: string",
      "}",
      "",
      "export const use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store = defineStore('$TM_FILENAME_BASE', () => {",
      "  const state = reactive<${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}State>({",
      "    ${TM_FILENAME_BASE/^(.*)$/${1:/downcase}/}: '${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}'",
      "  })",
      "",
      "  return {",
      "    state,$0",
      "  }",
      "})",
      "",
      "if (import.meta.hot)",
      "  import.meta.hot.accept(acceptHMRUpdate(use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store, import.meta.hot))",
      ""
    ]
  },
  "Composable Boilerplate": {
    "prefix": "composable",
    "description": "Bootstrap the code needed for a Vue.js composable file",
    "scope": "typescript",
    "body": [
      "export function ${TM_FILENAME_BASE/^(.*)$/${1:/camelcase}/}() {",
      "  /* [TODO] */",
      "  return {}$0",
      "}",
      "",
    ]
  },
}
